import pandas as pdimport numpy as npimport plotly.graph_objs as gofrom plotly.subplots import make_subplotsimport LFs.opt as optfrom glob import glob as _globdef glob(*argv, **kwargv):    return sorted(_glob(*argv, **kwargv))#  ------------- UV ---------------------------def budavari05(path_obs_data):    # Budavari et al. 2005    Budavari05 = {}    Budavari05["GALEX_FUV"] = pd.read_csv(        path_obs_data + "Budavari05_FUV.csv", header=None)    Budavari05["GALEX_FUV"] = Budavari05["GALEX_FUV"].rename(        columns={0: "M", 1: "MagF"})    Budavari05["GALEX_NUV"] = pd.read_csv(        path_obs_data + "Budavari05_NUV.csv", header=None)    Budavari05["GALEX_NUV"] = Budavari05["GALEX_NUV"].rename(        columns={0: "M", 1: "MagF"})    return Budavari05def wyder05(path_obs_data):    # UV mag from Wyder et al. 2005    Wyder05 = {}    Wyder05["GALEX_FUV"] = pd.read_csv(        path_obs_data + "Wyder05_FUV.csv", header=None)    Wyder05["GALEX_FUV"] = Wyder05["GALEX_FUV"].rename(        columns={0: "M", 1: "MagF"})    Wyder05["GALEX_NUV"] = pd.read_csv(        path_obs_data + "Wyder05_NUV.csv", header=None)    Wyder05["GALEX_NUV"] = Wyder05["GALEX_NUV"].rename(        columns={0: "M", 1: "MagF"})    return Wyder05def driver12uv(path_obs_data):    # UV mag from Driver et al. 2012    Driver12_UV = {}    Driver12_UV["GALEX_FUV"] = pd.read_csv(        path_obs_data + 'Driver12_FUV.csv', header=None)    Driver12_UV["GALEX_FUV"] = Driver12_UV["GALEX_FUV"].rename(        columns={0: 'M', 1: 'MagF'})    Driver12_UV["GALEX_NUV"] = pd.read_csv(        path_obs_data + 'Driver12_NUV.csv', header=None)    Driver12_UV["GALEX_NUV"] = Driver12_UV["GALEX_NUV"].rename(        columns={0: 'M', 1: 'MagF'})    return Driver12_UV# -------------------- Optical -----------def jones06(path_obs_data):    # Jones et al. 2006 for 2MASS    Jones06 = {}    Jones06["2MASS_K"] = pd.read_csv(        path_obs_data + "Jones06_2MASS_K.csv", header=None)    Jones06["2MASS_K"] = Jones06["2MASS_K"].rename(columns={0: "M", 1: "MagF"})    return Jones06def loveday12(path_obs_data):    # Loveday et al. 2012    Loveday12 = {}    for band in ["SDSS_u", "SDSS_g", "SDSS_r", "SDSS_i", "SDSS_z"]:        Loveday12[band] = pd.read_csv(            path_obs_data + "Loveday12_{}.csv".format(band), header=None        )        Loveday12[band] = Loveday12[band].rename(columns={0: "M", 1: "MagF"})    return Loveday12def driver12(path_obs_data):    # Driver et al. 2012    Driver12 = {}    for band in ["SDSS_u", "SDSS_g", "SDSS_r", "SDSS_i", "SDSS_z"]:        Driver12[band] = pd.read_csv(            path_obs_data + 'Driver12_{}.csv'.format(band), header=None)        Driver12[band] = Driver12[band].rename(columns={0: 'M', 1: 'MagF'})    for band in ["UKIDSS_Y", "UKIDSS_J", "UKIDSS_H", "UKIDSS_K"]:        Driver12[band] = pd.read_csv(            path_obs_data + "Driver12_{}.csv".format(band.replace("UKIDSS_", "")), header=None        )        Driver12[band] = Driver12[band].rename(columns={0: "M", 1: "MagF"})    return Driver12# -------------------- SIMS ----------------def read_sim1(path_obs_data):    MagF_TNG_1_allz = pd.read_pickle(path_obs_data+'MagF_TNG_1_allz')    return MagF_TNG_1_allzdef read_sim2(path_obs_data):    MagF_TNG_2_allz = pd.read_pickle(path_obs_data+'MagF_TNG_2_allz')    return MagF_TNG_2_allz# ------------------ plots ----------------------def plot_uv_obs(Budavari05, Wyder05, Driver12_UV):    hubb = 0.6774    fig_uv = make_subplots(        rows=1, cols=2, shared_yaxes=True, horizontal_spacing=0.001)    for br, band in enumerate(["GALEX_FUV", "GALEX_NUV"]):        trace_B05 = go.Scatter(            x=Budavari05[band]["M"] - 5 * np.log10(0.7 / hubb),            y=Budavari05[band]["MagF"] * (0.7 / hubb) ** 3,            mode="markers",            marker=dict(                color="pink", size=10, opacity=1, line=dict(width=1, color="black")            ),            name="Budavari et al. 2005",            showlegend=True if band == "GALEX_FUV" else False,            hoverinfo="none",            hoveron="points",        )        trace_W05 = go.Scatter(            x=Wyder05[band]["M"] - 5 * np.log10(0.7 / hubb),            y=10 ** (Wyder05[band]["MagF"]) * (0.7 / hubb) ** 3,            mode="markers",            marker=dict(                color="red", size=10, opacity=1, line=dict(width=1, color="black")            ),            showlegend=True if band == "GALEX_FUV" else False,            hoverinfo="none",            hoveron="points",            name="Wyder et al. 2005",        )        trace_D12 = go.Scatter(            x=Driver12_UV[band]["M"] + 5 * np.log10(hubb),            y=10 ** (Driver12_UV[band]["MagF"]) * (hubb) ** 3 / 0.5,            name="Driver et al. 2012",            mode="markers",            marker=dict(                color="cyan", size=10, opacity=1, line=dict(width=1, color="black")            ),            showlegend=True if band == "GALEX_FUV" else False,            hoverinfo="none",            hoveron="points",        )        fig_uv.append_trace(trace_B05, 1, br + 1)        fig_uv.append_trace(trace_W05, 1, br + 1)        fig_uv.append_trace(trace_D12, 1, br + 1)        fig_uv.add_annotation(            x=-21,            y=-1.5,            xref="x" + str(br + 1),            yref="y" + str(br + 1),            text=band.replace("_", " "),            showarrow=False,        )    fig_uv.update_xaxes(        linecolor="#000000",        showgrid=False,        linewidth=1,        mirror=True,        ticks="inside",        title="M [mag]",    )    fig_uv.update_yaxes(        linecolor="#000000",        showgrid=False,        linewidth=1,        mirror=True,        type="log",        ticks="inside",    )    fig_uv["layout"].update(        height=600,        width=800,        yaxis_title=u"\u03D5"        + "[Mpc"        + u"\u207B"        + u"\u00B3"        + "mag"        + u"\u207B"        + u"\u00B9"        + "]",        plot_bgcolor="white",        font=dict(size=13),        legend=dict(orientation="h", yanchor="top",                    y=1.13, xanchor="left", x=0.01),        hovermode="x",    )    return fig_uvdef plot_uv(selected_sims, selected_recs, selected_apers, selected_oris,Budavari05, Wyder05, Driver12_UV, MagF_TNG_1_allz, MagF_TNG_2_allz):    fig_uv = plot_uv_obs(Budavari05, Wyder05, Driver12_UV)    for br, band in enumerate(["GALEX_FUV", "GALEX_NUV"]):        if selected_sims and selected_recs and selected_apers and selected_oris:            for j, sim in enumerate(selected_sims):                if sim == "TNG50 1":                    data = MagF_TNG_1_allz                elif sim == "TNG50 2":                    data = MagF_TNG_2_allz                for i, rec in enumerate(selected_recs):                    for k, aper in enumerate(selected_apers):                        for l, ori in enumerate(selected_oris):                            xx = data[band][rec][aper][ori][0][                                data[band][rec][aper][ori][2] > 0                            ]                            yy = data[band][rec][aper][ori][2][                                data[band][rec][aper][ori][2] > 0                            ]                            yyE = data[band][rec][aper][ori][3][                                data[band][rec][aper][ori][2] > 0                            ]                            yyU = list(yy + yyE)                            yyD = list(yy - yyE)                            brg = data[band][rec][aper][ori][4][                                data[band][rec][aper][ori][2] > 0                            ]                            traceE = go.Scatter(                                x=list(xx) + list(xx[::-1]),                                y=yyU + yyD[::-1],                                fill="toself",                                fillcolor=opt.colors_rgba[aper],                                line=dict(color="rgba(7, 68, 0, 1)"),                                hoverinfo="skip",                                mode="none",                                showlegend=False,                            )                            trace = go.Scatter(                                x=xx,                                y=yy,                                mode="lines+markers",                                marker=dict(                                    symbol=opt.mark[sim][ori],                                    line_width=2,                                    line_color=opt.colors[aper],                                    color=opt.colors[aper],                                    size=8,                                    opacity=1,                                ),                                line=dict(                                    color=opt.colors[aper],                                    dash="solid"                                    if rec == "tau3_fdust2_best_apers"                                    else "dash",                                ),                                name=sim.replace("TNG50 ", "")                                + " "                                + rec.replace("_best_apers",                                              "").replace("_", " ")                                + " "                                + aper                                + " "                                + ori                                + " "                                + str(sum(brg)),                                showlegend=True if band.find(                                    "FUV") > -1 else False,                                text=["{}".format(a) for a in brg],                                hovertemplate="%{text}<extra></extra>",                            )                            fig_uv.append_trace(traceE, 1, br + 1)                            fig_uv.append_trace(trace, 1, br + 1)    return fig_uvdef plot_opt_obs(Loveday12, Driver12):    bands_o = [        ["SDSS_u", "SDSS_g", "SDSS_r"],        ["SDSS_i", "SDSS_z", "UKIDSS_Y"],        ["UKIDSS_J", "UKIDSS_H", "UKIDSS_K"],    ]    hubb = 0.6774    fig_opt = make_subplots(        rows=3,        cols=3,        shared_yaxes=True,        vertical_spacing=0.001,        shared_xaxes=True,        horizontal_spacing=0.001,    )    br = 0    for bn1 in [0, 1, 2]:        for bn2 in [0, 1, 2]:            band = bands_o[bn1][bn2]            if band.find("SDSS") > -1:                trace_L12 = go.Scatter(                    x=Loveday12[band]["M"] + 5 * np.log10(hubb),                    y=Loveday12[band]["MagF"] * (hubb) ** 3,                    name="Loveday et al. 2012",                    mode="markers",                    marker=dict(                        color="red",                        size=8,                        opacity=1,                        line=dict(width=1, color="black"),                    ),                    showlegend=True if (bn1 == 0) and (bn2 == 0) else False,                    hoverinfo="none",                    hoveron="points",                )                fig_opt.append_trace(trace_L12, bn1 + 1, bn2 + 1)            trace_D12 = go.Scatter(                x=Driver12[band]["M"] + 5 * np.log10(hubb),                y=10 ** (Driver12[band]["MagF"]) * (hubb) ** 3 / 0.5,                name="Driver et al. 2012",                mode="markers",                marker=dict(                    color="cyan", size=8, opacity=1, line=dict(width=1, color="black")                ),                showlegend=True if (bn1 == 0) and (bn2 == 0) else False,                hoverinfo="none",                hoveron="points",            )            br = br + 1            fig_opt.append_trace(trace_D12, bn1 + 1, bn2 + 1)            fig_opt.add_annotation(                x=-21,                y=-1.5,                xref="x" + str(br),                yref="y" + str(br),                text=band.replace("_", " "),                showarrow=False,            )            fig_opt.update_xaxes(                row=bn1 + 1, col=bn2 + 1, title="M [mag]" if bn1 == 2 else "",            )            fig_opt.update_yaxes(                row=bn1 + 1,                col=bn2 + 1,                title=u"\u03D5"                + "[Mpc"                + u"\u207B"                + u"\u00B3"                + "mag"                + u"\u207B"                + u"\u00B9"                + "]"                if bn2 == 0                else "",            )    fig_opt.update_yaxes(        linecolor="#000000",        showgrid=False,        linewidth=1,        mirror=True,        type="log",        ticks="inside",    )    fig_opt.update_xaxes(        linecolor="#000000", showgrid=False, linewidth=1, mirror=True, ticks="inside",    )    fig_opt["layout"].update(        height=1000,        width=1000,        plot_bgcolor="white",        font=dict(size=13),        legend=dict(orientation="h", yanchor="top",                    y=1.13, xanchor="left", x=0.01),        hovermode="x",    )    return fig_optdef plot_opt(selected_sims, selected_recs, selected_apers, selected_oris,Loveday12, Driver12,MagF_TNG_1_allz,MagF_TNG_2_allz):    bands_o = [        ["SDSS_u", "SDSS_g", "SDSS_r"],        ["SDSS_i", "SDSS_z", "UKIDSS_Y"],        ["UKIDSS_J", "UKIDSS_H", "UKIDSS_K"],    ]    fig_opt = plot_opt_obs(Loveday12, Driver12)    for bn1 in [0, 1, 2]:        for bn2 in [0, 1, 2]:            band = bands_o[bn1][bn2]            if selected_sims and selected_recs and selected_apers and selected_oris:                for j, sim in enumerate(selected_sims):                    if sim == "TNG50 1":                        data = MagF_TNG_1_allz                    elif sim == "TNG50 2":                        data = MagF_TNG_2_allz                    for i, rec in enumerate(selected_recs):                        for k, aper in enumerate(selected_apers):                            for l, ori in enumerate(selected_oris):                                xx = data[band][rec][aper][ori][0][                                    data[band][rec][aper][ori][2] > 0                                ]                                yy = data[band][rec][aper][ori][2][                                    data[band][rec][aper][ori][2] > 0                                ]                                yyE = data[band][rec][aper][ori][3][                                    data[band][rec][aper][ori][2] > 0                                ]                                yyU = list(yy + yyE)                                yyD = list(yy - yyE)                                brg = data[band][rec][aper][ori][4][                                    data[band][rec][aper][ori][2] > 0                                ]                                traceE = go.Scatter(                                    x=list(xx) + list(xx[::-1]),                                    y=yyU + yyD[::-1],                                    fill="toself",                                    fillcolor=opt.colors_rgba[aper],                                    line=dict(color="rgba(7, 68, 0, 1)"),                                    hoverinfo="skip",                                    mode="none",                                    showlegend=False,                                )                                trace = go.Scatter(                                    x=xx,                                    y=yy,                                    mode="lines+markers",                                    marker=dict(                                        symbol=opt.mark[sim][ori],                                        line_width=1,                                        line_color=opt.colors[aper],                                        color=opt.colors[aper],                                        size=6,                                        opacity=1,                                    ),                                    line=dict(                                        color=opt.colors[aper],                                        dash="solid"                                        if rec == "tau3_fdust2_best_apers"                                        else "dash",                                    ),                                    name=sim.replace("TNG50 ", "")                                    + " "                                    + rec.replace("_best_apers", "").replace("_", " ")                                    + " "                                    + aper                                    + " "                                    + ori                                    + " "                                    + str(sum(brg)),                                    showlegend=True                                    if (bn1 == 0) and (bn2 == 0)                                    else False,                                    text=["{}".format(a) for a in brg],                                    hovertemplate="%{text}<extra></extra>",                                )                                fig_opt.append_trace(traceE, bn1 + 1, bn2 + 1)                                fig_opt.append_trace(trace, bn1 + 1, bn2 + 1)    return fig_opt